/**
 * Jungle.com Inc.
 * Copyright (c) 2004-2018 All Rights Reserved.
 */ 
package com.jc.support.supports.dal.ibatis;

import com.jc.support.supports.dal.operation.exuser.*;
import com.jc.support.supports.dal.dataobject.*;


import java.io.*;
import java.net.*;
import java.util.*;

import java.math.BigDecimal;
import java.math.BigInteger;

import com.zeh.jungle.dal.paginator.PageQuery;
import com.zeh.jungle.dal.paginator.PageList;
import com.zeh.jungle.dal.paginator.PageQueryUtils;
import org.springframework.dao.DataAccessException;
import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;

import com.jc.support.supports.dal.dataobject.ExUserDO;
import com.jc.support.supports.dal.daointerface.ExUserDAO;

/**
 * ExUserDAO
 * database table: ex_user
 * database table comments: ExUser
 * This file is generated by <tt>dalgen</tt>, a DAL (Data Access Layer)
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/dalgen</tt>
 * 
 * @author Allen Wang(Wang Junxiang)
 * */
public class IbatisExUserDAO extends SqlMapClientDaoSupport implements ExUserDAO {


	/**
	 * 
	 * sql: 
	 * <pre>INSERT      INTO         ex_user         (             id ,user_name ,user_sex ,gmt_create ,gmt_modified ,create_by ,modify_by             )      VALUES         (?,?,?,?,?,?,?)</pre>
	 */
	public long insert(ExUserDO exUser) throws DataAccessException {
		if(exUser == null) {
			throw new IllegalArgumentException("Can't insert a null data object into db.");
		}
		getSqlMapClientTemplate().insert("supports.ExUser.insert", exUser);
		return exUser.getId();
	}

	/**
	 * 
	 * sql: 
	 * <pre>DELETE      FROM         ex_user      WHERE         id = ?</pre>
	 */
	public int delete(Long id) throws DataAccessException {
		return getSqlMapClientTemplate().delete("supports.ExUser.delete", id);
	}

	/**
	 * 
	 * sql: 
	 * <pre>UPDATE         ex_user      SET         user_name = ? ,user_sex = ? ,gmt_create = ? ,gmt_modified = ? ,create_by = ? ,modify_by = ?                  WHERE         id = ?</pre>
	 */
	public int update(ExUserDO exUser) throws DataAccessException {
		if(exUser == null) {
			throw new IllegalArgumentException("Can't update by a null data object.");
		}
		return getSqlMapClientTemplate().update("supports.ExUser.update", exUser);
	}

	/**
	 * 
	 * sql: 
	 * <pre>SELECT         id, user_name, user_sex, gmt_create, gmt_modified, create_by, modify_by                       FROM         ex_user                  WHERE         id = ?</pre>
	 */
	public ExUserDO queryById(Long id) throws DataAccessException {
		return (ExUserDO)getSqlMapClientTemplate().queryForObject("supports.ExUser.queryById",id);
	}

	/**
	 * 
	 * sql: 
	 * <pre>SELECT         id, user_name, user_sex, gmt_create, gmt_modified, create_by, modify_by                       FROM         ex_user</pre>
	 */
	public PageList<ExUserDO> findPage(int pageSize,int pageNum) throws DataAccessException {
		return PageQueryUtils.pageQuery(getSqlMapClientTemplate(),"supports.ExUser.findPage",null,pageNum,pageSize);
	}

	/**
	 * 
	 * sql: 
	 * <pre>SELECT         id, user_name, user_sex, gmt_create, gmt_modified, create_by, modify_by                       FROM         ex_user                  WHERE         user_name = ?</pre>
	 */
	public PageList<ExUserDO> queryByName(String userName,int pageSize,int pageNum) throws DataAccessException {
		return PageQueryUtils.pageQuery(getSqlMapClientTemplate(),"supports.ExUser.queryByName",userName,pageNum,pageSize);
	}

	/**
	 * 
	 * sql: 
	 * <pre>SELECT         id, user_name, user_sex, gmt_create, gmt_modified, create_by, modify_by                       FROM         ex_user                  WHERE         1=1                                        AND                      user_name = ?                                            AND                      user_sex = ?                                                ORDER BY         gmt_modified DESC</pre>
	 */
	public PageList<ExUserDO> queryByConditions(QueryByConditionsQuery param) throws DataAccessException {
		return PageQueryUtils.pageQuery(getSqlMapClientTemplate(),"supports.ExUser.queryByConditions",param);
	}

}

